{"version":3,"sources":["components/RandomQuote.js","components/QuotesAuthor.js","App.js","index.js"],"names":["RandomQuote","quoteData","getQuotesByAuthor","className","quoteText","type","onClick","quoteAuthor","quoteGenre","QuotesAuthor","mappingQuotes","quotesByAuthor","map","quote","_id","App","useState","setQuoteData","setQuotesByAuthor","loadDone","setLoadDone","useLoading","loading","loaderProps","valueText","containerProps","indicatorEl","getRandomQuote","axios","get","then","res","randomQuote","data","catch","err","console","log","params","author","quotesAuthor","Quotes","useEffect","href","target","rel","ReactDOM","render","StrictMode","indicator","width","document","getElementById"],"mappings":"0PAyBeA,EAzBK,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,UAAWC,EAAwB,EAAxBA,kBAChC,OACE,sBAAKC,UAAU,yBAAf,UACE,qBAAKA,UAAU,mBAAf,SACE,4BAAYA,UAAU,oBAAtB,SACE,4BAAIF,EAAUG,gBAGlB,qBAAKD,UAAU,qBAAf,SACE,yBACEE,KAAK,SACLF,UAAU,kBACVG,QAASJ,EAHX,UAKE,sBAAKC,UAAU,sBAAf,UACE,6BAAKF,EAAUM,cACf,6BAAKN,EAAUO,gBAEjB,mBAAGL,UAAU,6BAAb,sCCHKM,EAfM,SAAC,GAAwB,IAEtCC,EAFqC,EAArBC,eAEeC,KAAI,SAACC,GACxC,OACE,qBAAqBV,UAAU,0BAA/B,SACE,4BAAYA,UAAU,oBAAtB,SACE,4BAAIU,EAAMT,eAFJS,EAAMC,QAQpB,OAAO,qBAAKX,UAAU,gCAAf,SAAgDO,KCuG1CK,EA7GH,WAAM,MAEkBC,mBAAS,MAF3B,mBAETf,EAFS,KAEEgB,EAFF,OAG4BD,mBAAS,MAHrC,mBAGTL,EAHS,KAGOO,EAHP,OAIgBF,mBAAS,MAJzB,mBAITG,EAJS,KAICC,EAJD,OAKwBC,YAAW,CACjDC,SAAS,EACTC,YAAa,CAAEC,UAAW,sCAFpBC,EALQ,EAKRA,eAAgBC,EALR,EAKQA,YAMlBC,EAAiB,WACrBP,GAAY,GACZQ,IACGC,IAAI,2DACJC,MAAK,SAACC,GACL,IAAMC,EAAcD,EAAIE,KAAKA,KAAK,GAClChB,EAAae,GACbZ,GAAY,GACZF,EAAkB,SAEnBgB,OAAM,SAACC,GACNC,QAAQC,IAAIF,OAKZjC,EAAoB,WACxBkB,GAAY,GACZQ,IACGC,IAAI,mDAAoD,CACvDS,OAAQ,CAAEC,OAAQtC,EAAUM,eAE7BuB,MAAK,SAACC,GACL,IAAMS,EAAeT,EAAIE,KAAKA,KAC9Bf,EAAkBsB,GAClBpB,GAAY,MAEbc,OAAM,SAACC,GACNC,QAAQC,IAAIF,OAKZM,EAAS,WACb,OAAKtB,EAMDR,EAEA,gCACE,qBAAKR,UAAU,oBAAf,SACE,6BAAKF,EAAUM,gBAEjB,cAAC,EAAD,CAAcI,eAAgBA,OAGhCV,EAEA,cAAC,EAAD,CACEA,UAAWA,EACXC,kBAAmBA,SAJzB,EAbI,6CAAKC,UAAU,WAAcsB,GAA7B,aACGC,MA2BT,OANAgB,qBAAU,WACHzC,GACH0B,MAED,CAAC1B,IAGF,sBAAKE,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,yBACEA,UAAU,wBACVE,KAAK,SACLC,QAASqB,EAHX,oBAME,mBAAGxB,UAAU,uBAAb,4BAGJ,sBAAMA,UAAU,WAAhB,SACE,cAACsC,EAAD,MAEF,wBAAQtC,UAAU,aAAlB,SACE,wBAAOA,UAAU,YAAjB,wBAEE,4BACE,mBACEwC,KAAK,6BACLC,OAAO,SACPC,IAAI,aAHN,uBAHJ,8BC3FRC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAgBC,UAAW,cAAC,IAAD,CAAWC,MAAM,OAA5C,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.3ae21485.chunk.js","sourcesContent":["const RandomQuote = ({ quoteData, getQuotesByAuthor }) => {\n  return (\n    <div className=\"random-quote-container\">\n      <div className=\"wrap-random-text\">\n        <blockquote className=\"random-quote-text\">\n          <q>{quoteData.quoteText}</q>\n        </blockquote>\n      </div>\n      <div className=\"wrap-random-author\">\n        <button\n          type=\"button\"\n          className=\"btn-call-quotes\"\n          onClick={getQuotesByAuthor}\n        >\n          <div className=\"random-quote-author\">\n            <h1>{quoteData.quoteAuthor}</h1>\n            <h2>{quoteData.quoteGenre}</h2>\n          </div>\n          <i className=\"material-icons-round arrow\">arrow_right_alt</i>\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default RandomQuote;\n","const QuotesAuthor = ({ quotesByAuthor }) => {\n  // Looping over quotes\n  const mappingQuotes = quotesByAuthor.map((quote) => {\n    return (\n      <div key={quote._id} className=\"wrap-random-text author\">\n        <blockquote className=\"random-quote-text\">\n          <q>{quote.quoteText}</q>\n        </blockquote>\n      </div>\n    );\n  });\n\n  return <div className=\"random-quote-container author\">{mappingQuotes}</div>;\n};\n\nexport default QuotesAuthor;\n","import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { useLoading } from \"@agney/react-loading\";\nimport RandomQuote from \"./components/RandomQuote\";\nimport QuotesAuthor from \"./components/QuotesAuthor\";\n\nconst App = () => {\n  // Quotes state\n  const [quoteData, setQuoteData] = useState(null);\n  const [quotesByAuthor, setQuotesByAuthor] = useState(null);\n  const [loadDone, setLoadDone] = useState(null);\n  const { containerProps, indicatorEl } = useLoading({\n    loading: true,\n    loaderProps: { valueText: \"Fetching quote from Quote Garden\" },\n  });\n\n  // Get random quote\n  const getRandomQuote = () => {\n    setLoadDone(false);\n    axios\n      .get(\"https://quote-garden.herokuapp.com/api/v3/quotes/random\")\n      .then((res) => {\n        const randomQuote = res.data.data[0];\n        setQuoteData(randomQuote);\n        setLoadDone(true);\n        setQuotesByAuthor(null);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  // Get all quotes by author\n  const getQuotesByAuthor = () => {\n    setLoadDone(false);\n    axios\n      .get(\"https://quote-garden.herokuapp.com/api/v3/quotes\", {\n        params: { author: quoteData.quoteAuthor },\n      })\n      .then((res) => {\n        const quotesAuthor = res.data.data;\n        setQuotesByAuthor(quotesAuthor);\n        setLoadDone(true);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  // Displaying quotes data to the component\n  const Quotes = () => {\n    if (!loadDone)\n      return (\n        <div className=\"loaders\" {...containerProps}>\n          {indicatorEl}\n        </div>\n      );\n    if (quotesByAuthor)\n      return (\n        <div>\n          <div className=\"quote-author-name\">\n            <h1>{quoteData.quoteAuthor}</h1>\n          </div>\n          <QuotesAuthor quotesByAuthor={quotesByAuthor} />\n        </div>\n      );\n    if (quoteData)\n      return (\n        <RandomQuote\n          quoteData={quoteData}\n          getQuotesByAuthor={getQuotesByAuthor}\n        />\n      );\n  };\n\n  useEffect(() => {\n    if (!quoteData) {\n      getRandomQuote();\n    }\n  }, [quoteData]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <button\n          className=\"btn-call-random-quote\"\n          type=\"button\"\n          onClick={getRandomQuote}\n        >\n          {`random `}\n          <i className=\"material-icons-round\">autorenew</i>\n        </button>\n      </header>\n      <main className=\"App-main\">\n        <Quotes />\n      </main>\n      <footer className=\"App-footer\">\n        <small className=\"copyright\">\n          {`created by `}\n          <b>\n            <a\n              href=\"https://github.com/gitraya\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              gitraya\n            </a>\n          </b>\n          {`- devChallenges.io`}\n        </small>\n      </footer>\n    </div>\n  );\n};\n\nexport default App;\n","import \"./index.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { LoaderProvider, ThreeDots } from \"@agney/react-loading\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <LoaderProvider indicator={<ThreeDots width=\"50\" />}>\n      <App />\n    </LoaderProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}