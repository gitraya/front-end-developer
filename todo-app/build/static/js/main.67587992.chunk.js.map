{"version":3,"sources":["components/Form.js","components/Todo.js","components/FilterButton.js","App.js","index.js"],"names":["Form","addTodo","useState","name","setName","onSubmit","e","preventDefault","className","type","placeholder","value","onChange","target","Todo","id","completed","toggleCompletedTodo","filter","deleteTodo","defaultChecked","htmlFor","onClick","class","FilterButton","isPressed","setFilter","aria-pressed","FILTER_MAP","All","Active","todo","Completed","FILTER_NAMES","Object","keys","App","defaultTodos","todos","setTodos","remainingTodo","localStorage","setItem","JSON","stringify","deleteCompletedTodos","updateTodos","map","todoList","filterList","useEffect","data","parse","getItem","takeDataLocalTodos","style","margin","newTodo","nanoid","length","showDeleteAll","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.67587992.chunk.js","sourcesContent":["import { useState } from 'react';\n\nconst Form = ({ addTodo }) => {\n  // State for new todo name\n  const [name, setName] = useState('');\n\n  // Handle submitted form\n  function handleSubmit(e) {\n    e.preventDefault();\n    if (name) addTodo(name);\n    setName('');\n  }\n\n  // Handling change input\n  function handleChange(e) {\n    setName(e.target.value);\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className=\"form-control\">\n        <input\n          type=\"text\"\n          className=\"input-text\"\n          placeholder=\"add details\"\n          value={name}\n          onChange={handleChange}\n        />\n        <input type=\"submit\" className=\"button-submit\" value=\"Add\" />\n      </div>\n    </form>\n  );\n};\n\nexport default Form;\n","const Todo = ({\n  name,\n  id,\n  completed,\n  toggleCompletedTodo,\n  filter,\n  deleteTodo,\n}) => {\n  return (\n    <div className=\"todo\">\n      <div className=\"todo-text\">\n        <input\n          id={id}\n          className=\"checkbox\"\n          type=\"checkbox\"\n          defaultChecked={completed}\n          onChange={() => {\n            toggleCompletedTodo(id);\n          }}\n        />\n        <label className=\"label\" htmlFor={id}>\n          {name}\n        </label>\n      </div>\n      {filter === \"Completed\" ? (\n        <div className=\"delete-icon\">\n          <button type=\"button\" onClick={() => deleteTodo(id)}>\n            <i class=\"material-icons-round\">delete_outline</i>\n          </button>\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default Todo;\n","import React from \"react\";\n\nconst FilterButton = ({ name, isPressed, setFilter }) => {\n  return (\n    <button\n      type=\"button\"\n      aria-pressed={isPressed}\n      onClick={() => setFilter(name)}\n    >\n      {name}\n      <div className=\"line\" />\n    </button>\n  );\n};\n\nexport default FilterButton;\n","import { useState, useEffect } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport Form from \"./components/Form\";\nimport Todo from \"./components/Todo\";\nimport FilterButton from \"./components/FilterButton\";\n\nconst FILTER_MAP = {\n  All: () => true,\n  Active: (todo) => !todo.completed,\n  Completed: (todo) => todo.completed,\n};\n\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\nconst App = ({ defaultTodos }) => {\n  // Todos and filter todo state\n  const [todos, setTodos] = useState([]);\n  const [filter, setFilter] = useState(\"All\");\n\n  // Add new todo\n  const addTodo = (name) => {\n    const newTodo = { id: `todo-${nanoid()}`, name, completed: false };\n    localStorage.setItem(\"dataTodos\", JSON.stringify([...todos, newTodo]));\n    setTodos([...todos, newTodo]);\n  };\n\n  // Delete todo\n  const deleteTodo = (id) => {\n    const remainingTodo = todos.filter((todo) => id !== todo.id);\n    localStorage.setItem(\"dataTodos\", JSON.stringify(remainingTodo));\n    setTodos(remainingTodo);\n  };\n\n  // Delete completed todos\n  const deleteCompletedTodos = () => {\n    const remainingTodo = todos.filter((todo) => false === todo.completed);\n    localStorage.setItem(\"dataTodos\", JSON.stringify(remainingTodo));\n    setTodos(remainingTodo);\n  };\n\n  // Toggle completed todo\n  const toggleCompletedTodo = (id) => {\n    const updateTodos = todos.map((todo) =>\n      id === todo.id ? { ...todo, completed: !todo.completed } : todo\n    );\n    localStorage.setItem(\"dataTodos\", JSON.stringify(updateTodos));\n    setTodos(updateTodos);\n  };\n\n  // Displaying todo\n  const todoList = todos.filter(FILTER_MAP[filter]).map((todo) => {\n    return (\n      <Todo\n        name={todo.name}\n        id={todo.id}\n        key={todo.id}\n        completed={todo.completed}\n        toggleCompletedTodo={toggleCompletedTodo}\n        filter={filter}\n        deleteTodo={deleteTodo}\n      />\n    );\n  });\n\n  // Filtering todo\n  const filterList = FILTER_NAMES.map((name) => (\n    <FilterButton\n      name={name}\n      key={name}\n      isPressed={name === filter}\n      setFilter={setFilter}\n    />\n  ));\n\n  // Show delete all button\n  const showDeleteAll = () => {\n    const todoCompleted = todos.filter((todo) => todo.completed === true);\n\n    if (todoCompleted.length > 1 && filter === \"Completed\")\n      return (\n        <div className=\"del-all-container\">\n          <button type=\"submit\" onClick={deleteCompletedTodos}>\n            <i class=\"material-icons-round\">delete_outline</i> delete all\n          </button>\n        </div>\n      );\n  };\n\n  // Save todos in local storage\n  const takeDataLocalTodos = () => {\n    const data = JSON.parse(localStorage.getItem(\"dataTodos\"));\n    setTodos(data || defaultTodos);\n  };\n\n  useEffect(() => {\n    takeDataLocalTodos();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"col-6\">\n        <h1>#todo</h1>\n      </header>\n      <main>\n        <div className=\"container\">\n          <div className=\"filter-container\">{filterList}</div>\n          <div\n            className=\"form-container\"\n            style={filter === \"Completed\" ? { margin: \"0px\" } : {}}\n          >\n            {filter !== \"Completed\" && <Form addTodo={addTodo} />}\n          </div>\n          <div className=\"todos-container\">{todos ? todoList : \"\"}</div>\n          {showDeleteAll()}\n        </div>\n      </main>\n      <footer>\n        <small className=\"copyright\">\n          created by\n          <b>\n            <a\n              href=\"https://github.com/gitraya\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              gitraya\n            </a>\n          </b>\n          - devChallenges.io\n        </small>\n      </footer>\n    </div>\n  );\n};\n\nexport default App;\n","import \"./styles.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nconst DATA = [\n  { id: \"todo-0\", name: \"Eat\", completed: true },\n  { id: \"todo-1\", name: \"Sleep\", completed: false },\n  { id: \"todo-2\", name: \"Repeat\", completed: true },\n];\n\nReactDOM.render(\n  <React.StrictMode>\n    <App defaultTodos={DATA} />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}