{"version":3,"sources":["utils/index.js","components/Quiz/QuizMenu.js","components/Button/AnswerButton.js","components/Quiz/QuizGame.js","components/Quiz/QuizResult.js","components/Main.js","components/Footer.js","components/App.js","index.js"],"names":["randomNum","max","Math","floor","random","generateUniqueRandom","arr","number","includes","length","push","getQuizQuestion","allCountries","defaultQuiz","setQuiz","trueCountry","filter","country","capital","flags","svg","falseCountry","randArr","i","rand","name","common","option","j","shuffle","question","flag","answer","trueAnswer","falseAnswer","alfabet","onValueChange","e","state","setState","id","target","type","value","level","QuizMenu","quizState","setQuizState","getQuestion","setQuizAllType","isQuizReady","handleValueChange","className","style","isTrue","isFalse","paddingBottom","onSubmit","preventDefault","alert","startGame","defaultChecked","onChange","htmlFor","checked","disabled","AnswerButton","forwardRef","ref","index","quizQuestion","checkAnswer","buttonClass","onClick","QuizGame","useState","buttonRefs","setButtonRefs","answerButtonRender","map","useEffect","Array","fill","_","createRef","useImperativeHandle","src","process","alt","stage","width","height","objectPosition","objectFit","QuizResult","resetQuizGame","score","Main","useRef","startQuiz","endQuiz","Footer","href","rel","App","setAllCountries","quizAllType","setQuizQuestion","checkQuizEnd","checkAllTypeQuiz","randBoolean","a","classList","add","current","elButton","querySelector","innerText","fetch","then","res","json","data","catch","err","console","log","backgroundImage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a892e977.chunk.js","sourcesContent":["// Get random number\nexport const randomNum = (max) => {\n  let number = Math.floor(Math.random() * max);\n  return number;\n};\n\n// Shuffle array\nexport const shuffle = (arr) => {\n  for (let i = arr.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [arr[i], arr[j]] = [arr[j], arr[i]];\n  }\n};\n\n// Get unique random number\nexport const generateUniqueRandom = (max, arr) => {\n  let number = randomNum(max);\n\n  if (!arr.includes(number)) {\n    arr.push(number);\n    return number;\n  } else {\n    if (arr.length < max) {\n      return generateUniqueRandom(max, arr);\n    } else {\n      return false;\n    }\n  }\n};\n\n// Get and store random quiz question\nexport const getQuizQuestion = (allCountries, defaultQuiz, setQuiz) => {\n  allCountries = allCountries\n    ?.filter((country) => country.capital && country.capital[0] !== \"\")\n    .filter((country) => country.flags?.svg !== \"\");\n\n  // Generate country data for question and true answer\n  let trueCountry = allCountries[randomNum(allCountries.length)];\n  const { capital = [], flags = {} } = trueCountry;\n  if (!capital[0] || !flags?.svg) {\n    return (trueCountry = allCountries[randomNum(allCountries.length)]);\n  }\n\n  // Generate country data for false answer\n  const falseCountry = [];\n  const randArr = [];\n  for (let i = 1; i <= 3; i++) {\n    let rand = generateUniqueRandom(allCountries.length, randArr);\n    falseCountry.push(allCountries[rand].name?.common);\n  }\n\n  // Shuffle answer option\n  const option = [trueCountry.name?.common, ...falseCountry];\n  shuffle(option);\n\n  // Set updated quiz\n  const quiz = {\n    question: { capital: trueCountry.capital[0], flag: trueCountry.flags?.svg },\n    answer: { trueAnswer: trueCountry.name?.common, falseAnswer: falseCountry },\n    option,\n    alfabet: defaultQuiz.alfabet,\n  };\n\n  // Update quiz\n  setQuiz(quiz);\n};\n\n// Handle value change\nexport const onValueChange = (e, state, setState, id) => {\n  switch (e.target.name) {\n    case \"type\":\n      switch (id) {\n        case \"capital\":\n          setState({\n            ...state,\n            type: { ...state.type, capital: !state.type.capital },\n          });\n          break;\n        case \"flag\":\n          setState({\n            ...state,\n            type: { ...state.type, flag: !state.type.flag },\n          });\n          break;\n        default:\n          break;\n      }\n      break;\n    case \"level\":\n      switch (e.target.value) {\n        case \"VeryEasy\":\n          setState({ ...state, level: 5 });\n          break;\n        case \"Easy\":\n          setState({ ...state, level: 15 });\n          break;\n        case \"Normal\":\n          setState({ ...state, level: 30 });\n          break;\n        case \"Hard\":\n          setState({ ...state, level: 65 });\n          break;\n        case \"VeryHard\":\n          setState({ ...state, level: 100 });\n          break;\n        default:\n          break;\n      }\n      break;\n    default:\n      break;\n  }\n};\n","import { onValueChange } from \"../../utils\";\n\nconst QuizMenu = ({\n  quizState,\n  setQuizState,\n  getQuestion,\n  setQuizAllType,\n  isQuizReady,\n}) => {\n  // start a quiz\n  const startGame = () => {\n    const { capital, flag } = quizState.type;\n\n    // if all types are not selected\n    if (!capital && !flag) {\n      return alert(\"You must select at least one question type!\");\n    } else if (capital && flag) {\n      setQuizAllType(true);\n    }\n\n    getQuestion();\n  };\n\n  // handle form submit\n  const handleFormSubmit = (e) => {\n    e.preventDefault();\n    startGame();\n  };\n\n  // handle value changes\n  const handleValueChange = (e) => onValueChange(e, quizState, setQuizState);\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"app-title\">country quiz</h1>\n      <div\n        className=\"quiz-card menu\"\n        style={\n          quizState.isTrue || quizState.isFalse ? { paddingBottom: \"1rem\" } : {}\n        }\n      >\n        <form onSubmit={handleFormSubmit}>\n          <div className=\"form-quiz-type\">\n            <h2 className=\"question-text menu\">Select the question type?</h2>\n            <div className=\"input-control\">\n              <input\n                id=\"capital\"\n                name=\"type\"\n                type=\"checkbox\"\n                defaultChecked={quizState.type.capital}\n                onChange={(e) =>\n                  onValueChange(e, quizState, setQuizState, \"capital\")\n                }\n                className=\"checkbox-quiz\"\n              />\n              <label className=\"form-label\" htmlFor=\"capital\">\n                Capital of a country\n              </label>\n            </div>\n            <div className=\"input-control\">\n              <input\n                id=\"flag\"\n                name=\"type\"\n                type=\"checkbox\"\n                onChange={(e) =>\n                  onValueChange(e, quizState, setQuizState, \"flag\")\n                }\n                className=\"checkbox-quiz\"\n              />\n              <label className=\"form-label\" htmlFor=\"flag\">\n                Flag of a country\n              </label>\n            </div>\n          </div>\n          <div className=\"form-quiz-type\">\n            <h2 className=\"question-text menu\">\n              How many questions do you want to play?\n            </h2>\n            <div className=\"input-control\">\n              <input\n                className=\"radio-quiz\"\n                type=\"radio\"\n                name=\"level\"\n                id=\"veryeasy\"\n                checked={quizState.level === 5}\n                onChange={handleValueChange}\n                value=\"VeryEasy\"\n              />\n              <label\n                className=\"form-label\"\n                htmlFor=\"veryeasy\"\n              >{`Very Easy (5)`}</label>\n            </div>\n            <div className=\"input-control\">\n              <input\n                className=\"radio-quiz\"\n                type=\"radio\"\n                name=\"level\"\n                id=\"easy\"\n                checked={quizState.level === 15}\n                onChange={handleValueChange}\n                value=\"Easy\"\n              />\n              <label className=\"form-label\" htmlFor=\"easy\">{`Easy (15)`}</label>\n            </div>\n            <div className=\"input-control\">\n              <input\n                className=\"radio-quiz\"\n                type=\"radio\"\n                name=\"level\"\n                id=\"normal\"\n                checked={quizState.level === 30}\n                onChange={handleValueChange}\n                value=\"Normal\"\n              />\n              <label\n                className=\"form-label\"\n                htmlFor=\"normal\"\n              >{`Normal (30)`}</label>\n            </div>\n            <div className=\"input-control\">\n              <input\n                className=\"radio-quiz\"\n                type=\"radio\"\n                name=\"level\"\n                id=\"hard\"\n                checked={quizState.level === 65}\n                onChange={handleValueChange}\n                value=\"Hard\"\n              />\n              <label className=\"form-label\" htmlFor=\"hard\">{`Hard (65)`}</label>\n            </div>\n            <div className=\"input-control\">\n              <input\n                className=\"radio-quiz\"\n                type=\"radio\"\n                name=\"level\"\n                id=\"veryhard\"\n                checked={quizState.level === 100}\n                onChange={handleValueChange}\n                value=\"VeryHard\"\n              />\n              <label\n                className=\"form-label\"\n                htmlFor=\"veryhard\"\n              >{`Very Hard (100)`}</label>\n            </div>\n          </div>\n          <button\n            disabled={!isQuizReady}\n            className=\"start-button\"\n            type=\"submit\"\n          >\n            Start Game\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default QuizMenu;\n","import { forwardRef } from \"react\";\n\nconst AnswerButton = forwardRef(\n  ({ answer, index, quizQuestion, quizState, checkAnswer, disabled }, ref) => {\n    // Button class\n    const buttonClass = `answer-button ${\n      !quizState.isTrue && !quizState.isFalse ? \" \" : \"\"\n    }`;\n\n    return (\n      <button\n        ref={ref}\n        disabled={disabled}\n        key={index}\n        className={buttonClass}\n        onClick={(e) => {\n          checkAnswer(e, answer);\n        }}\n      >\n        <div className=\"wrap-answer\">\n          <span className=\"alfa-text\">{quizQuestion.alfabet[index]}</span>\n          <span className=\"answer-text\">{answer}</span>\n        </div>\n        <i className=\"material-icons-round\">\n          {quizState.isTrue\n            ? \"check_circle_outline\"\n            : quizState.isFalse\n            ? \"highlight_off\"\n            : \"\"}\n        </i>\n      </button>\n    );\n  }\n);\n\nexport default AnswerButton;\n","import {\n  useEffect,\n  useImperativeHandle,\n  useState,\n  forwardRef,\n  createRef,\n} from \"react\";\nimport AnswerButton from \"../Button/AnswerButton\";\n\nconst QuizGame = forwardRef(\n  ({ checkAnswer, quizState, quizQuestion, getQuestion }, ref) => {\n    // array button refs\n    const [buttonRefs, setButtonRefs] = useState([]);\n\n    // create an answer button\n    const answerButtonRender = quizQuestion.option.map((answer, i) => {\n      return (\n        <AnswerButton\n          ref={buttonRefs[i]}\n          answer={answer}\n          key={i}\n          index={i}\n          quizState={quizState}\n          quizQuestion={quizQuestion}\n          checkAnswer={checkAnswer}\n          disabled={quizState.isTrue || quizState.isFalse ? \"disabled\" : null}\n        />\n      );\n    });\n\n    useEffect(() => {\n      setButtonRefs((buttonRefs) =>\n        Array(quizQuestion.option.length)\n          .fill()\n          .map((_, i) => buttonRefs[i] || createRef())\n      );\n    }, [quizQuestion]);\n\n    useImperativeHandle(ref, () => ({ buttonRefs }));\n\n    return (\n      <div className=\"container\">\n        <h1 className=\"app-title\">country quiz</h1>\n        <img\n          className=\"image-onquiz\"\n          src={`${process.env.PUBLIC_URL}/images/undraw_adventure_4hum 1.svg`}\n          alt=\"hero\"\n        />\n        <div\n          className=\"quiz-card\"\n          style={\n            quizState.isTrue || quizState.isFalse\n              ? { paddingBottom: \"1rem\" }\n              : {}\n          }\n        >\n          <span className=\"text-stage\">\n            {quizState.stage}/{quizState.level}\n          </span>\n          {quizState.type.capital ? (\n            <h2 className=\"question-text\">{`${quizQuestion.question.capital} is the capital of`}</h2>\n          ) : quizState.type.flag ? (\n            <div>\n              <img\n                alt=\"Flag\"\n                src={quizQuestion.question.flag}\n                style={{\n                  width: \"5.5rem\",\n                  height: \"auto\",\n                  objectPosition: \"center\",\n                  objectFit: \"cover\",\n                }}\n              />\n              <h2 className=\"question-text\">\n                Which country does this flag belong to?\n              </h2>\n            </div>\n          ) : (\n            \"\"\n          )}\n          {answerButtonRender}\n          {quizState.isTrue || quizState.isFalse ? (\n            <button type=\"submit\" className=\"next-button\" onClick={getQuestion}>\n              Next\n            </button>\n          ) : (\n            \"\"\n          )}\n        </div>\n      </div>\n    );\n  }\n);\n\nexport default QuizGame;\n","const QuizResult = ({ quizState, resetQuizGame }) => {\n  return (\n    <div className=\"container\">\n      <h1 className=\"app-title\">country quiz</h1>\n      <div className=\"quiz-card end\">\n        <img\n          src={`${process.env.PUBLIC_URL}/images/undraw_winners_ao2o 2.svg`}\n          alt=\"winners\"\n        />\n        <div className=\"win-text\">\n          <h1>Results</h1>\n          <p>\n            You got <span className=\"score-text\">{quizState.score}</span>{\" \"}\n            correct answers\n          </p>\n        </div>\n        <button className=\"try-button\" type=\"submit\" onClick={resetQuizGame}>\n          Try again\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default QuizResult;\n","import { forwardRef, useImperativeHandle, useRef } from \"react\";\nimport QuizMenu from \"./Quiz/QuizMenu\";\nimport QuizGame from \"./Quiz/QuizGame\";\nimport QuizResult from \"./Quiz/QuizResult\";\n\nconst Main = forwardRef(\n  (\n    {\n      isQuizReady,\n      quizState,\n      setQuizState,\n      setQuizAllType,\n      quizQuestion,\n      checkAnswer,\n      getQuestion,\n      resetQuizGame,\n    },\n    ref\n  ) => {\n    // button references\n    const buttonRefs = useRef(null);\n    useImperativeHandle(ref, () => ({ buttonRefs }));\n\n    return (\n      <main className=\"App-main\">\n        {quizState.startQuiz ? (\n          <QuizGame\n            ref={buttonRefs}\n            quizState={quizState}\n            quizQuestion={quizQuestion}\n            checkAnswer={checkAnswer}\n            getQuestion={getQuestion}\n          />\n        ) : quizState.endQuiz ? (\n          <QuizResult quizState={quizState} resetQuizGame={resetQuizGame} />\n        ) : (\n          <QuizMenu\n            isQuizReady={isQuizReady}\n            quizState={quizState}\n            setQuizState={setQuizState}\n            getQuestion={getQuestion}\n            setQuizAllType={setQuizAllType}\n          />\n        )}\n      </main>\n    );\n  }\n);\n\nexport default Main;\n","const Footer = () => {\n  return (\n    <footer className=\"App-footer\">\n      <small className=\"copyright\">\n        {`created by `}\n        <b>\n          <a href=\"https://github.com/gitraya\" target=\"_blank\" rel=\"noreferrer\">\n            gitraya\n          </a>\n        </b>\n        {`- devChallenges.io`}\n      </small>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import { useState, useEffect, useRef } from \"react\";\nimport Main from \"./Main\";\nimport Footer from \"./Footer\";\nimport { getQuizQuestion } from \"../utils\";\n\nconst App = () => {\n  const [allCountries, setAllCountries] = useState(null); // state for all countries\n  const [quizAllType, setQuizAllType] = useState(false); // state whether all question types are active\n\n  // state for quiz questions\n  const [quizQuestion, setQuizQuestion] = useState({\n    question: { capital: \"\", flag: \"\" },\n    answer: { trueAnswer: \"\", falseAnswer: [] },\n    option: [],\n    alfabet: [\"A\", \"B\", \"C\", \"D\"],\n  });\n\n  // state quiz\n  const [quizState, setQuizState] = useState({\n    startQuiz: false,\n    endQuiz: false,\n    level: 30,\n    stage: 0,\n    score: 0,\n    type: { capital: true, flag: false },\n    isTrue: false,\n    isFalse: false,\n  });\n\n  // button references\n  const buttonRefs = useRef(null);\n\n  // check if the game is over\n  const checkQuizEnd = () => {\n    const { level, stage } = quizState;\n\n    if (stage === level + 1) {\n      setQuizState({\n        ...quizState,\n        startQuiz: false,\n        endQuiz: true,\n      });\n      return;\n    }\n  };\n\n  // check if all question types are enabled\n  const checkAllTypeQuiz = () => {\n    const randBoolean = Math.random() < 0.5;\n    if (quizAllType) {\n      setQuizState({\n        ...quizState,\n        type: { capital: randBoolean, flag: !randBoolean },\n        isTrue: false,\n        isFalse: false,\n      });\n    }\n  };\n\n  // get questions\n  const getQuestion = async () => {\n    await setQuizState({\n      ...quizState,\n      startQuiz: true,\n      endQuiz: false,\n      isFalse: false,\n      isTrue: false,\n      stage: (quizState.stage += 1),\n    });\n\n    checkAllTypeQuiz();\n    getQuizQuestion(allCountries, quizQuestion, setQuizQuestion);\n    checkQuizEnd();\n  };\n\n  // check the answers from the users\n  const checkAnswer = async (e, answer) => {\n    // if the answer is correct\n    if (answer === quizQuestion.answer.trueAnswer) {\n      await setQuizState({\n        ...quizState,\n        isFalse: false,\n        isTrue: true,\n        score: (quizState.score += 1),\n      });\n      return e.target.classList.add(\"true\");\n    } else {\n      // if the answer is wrong\n      await setQuizState({ ...quizState, isFalse: true, isTrue: false });\n      buttonRefs.current.buttonRefs.current.buttonRefs.map((elButton) => {\n        if (\n          elButton.current.querySelector(\".answer-text\").innerText ===\n          quizQuestion.answer.trueAnswer\n        ) {\n          elButton.current.querySelector(\"i\").innerText =\n            \"check_circle_outline\";\n          return (elButton.current.className = \"answer-button true\");\n        }\n        return elButton;\n      });\n      return e.target.classList.add(\"false\");\n    }\n  };\n\n  // reset all\n  const resetQuizGame = () => {\n    setQuizQuestion({\n      question: { capital: \"\", flag: \"\" },\n      answer: { trueAnswer: \"\", falseAnswer: [] },\n      option: [],\n      alfabet: [\"A\", \"B\", \"C\", \"D\"],\n    });\n    setQuizState({\n      startQuiz: false,\n      endQuiz: false,\n      level: 30,\n      stage: 0,\n      score: 0,\n      type: { capital: true, flag: false },\n      isTrue: false,\n      isFalse: false,\n    });\n    setQuizAllType(false);\n  };\n\n  // retrieve state data\n  const fetchingCountry = () => {\n    fetch(\"https://restcountries.com/v3.1/all\")\n      .then((res) => res.json())\n      .then((data) => setAllCountries(data))\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  useEffect(() => {\n    if (!allCountries) fetchingCountry();\n  }, [allCountries]);\n\n  return (\n    <div\n      className=\"App\"\n      style={{\n        backgroundImage: `url(${`${process.env.PUBLIC_URL}/images/background.png`})`,\n      }}\n    >\n      <Main\n        ref={buttonRefs}\n        quizState={quizState}\n        setQuizState={setQuizState}\n        quizQuestion={quizQuestion}\n        setQuizQuestion={setQuizQuestion}\n        setQuizAllType={setQuizAllType}\n        checkAnswer={checkAnswer}\n        resetQuizGame={resetQuizGame}\n        getQuestion={getQuestion}\n        isQuizReady={allCountries?.length > 0}\n      />\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","import \"./styles/index.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}